# core_operators.bsh
# Defines standard operator symbols and their BSH handlers.
echo "Loading Core Operators Framework (core_operators.bsh)..." [cite: 124]

# --- Define Core Operator Symbols & Properties ---
# TYPE: UNARY_PREFIX, UNARY_POSTFIX, BINARY_INFIX, TERNARY_PRIMARY
# ASSOC: L (Left), R (Right), N (Non-associative/Unary)
# PRECEDENCE: Higher numbers mean higher precedence.
# HANDLER: The BSH function to call.

# Arithmetic Operators
# Precedences: Multiplicative (50), Additive (40)
defoperator "*" TYPE BINARY_INFIX PRECEDENCE 50 ASSOC L HANDLER "bsh_op_multiply"
defoperator "/" TYPE BINARY_INFIX PRECEDENCE 50 ASSOC L HANDLER "bsh_op_divide"
defoperator "%" TYPE BINARY_INFIX PRECEDENCE 50 ASSOC L HANDLER "bsh_op_modulo"
defoperator "+" TYPE BINARY_INFIX PRECEDENCE 40 ASSOC L HANDLER "bsh_op_add_or_concat" # Smart handler
defoperator "-" TYPE BINARY_INFIX PRECEDENCE 40 ASSOC L HANDLER "bsh_op_subtract"
# Unary minus could be a separate operator or handled by bsh_op_subtract if it gets one arg.
# For simplicity, assume tokenizer handles negative numbers like "-5" as TOKEN_NUMBER.
# If user types "- $var", then '-' is a prefix operator.
# defoperator "-" TYPE UNARY_PREFIX PRECEDENCE 60 ASSOC N HANDLER "bsh_op_negate"


# Unary Increment/Decrement (high precedence)
# Note: The BSH handlers will need to expect a variable NAME for these.
defoperator "++" TYPE UNARY_PREFIX PRECEDENCE 60 ASSOC N HANDLER "bsh_op_prefix_increment"
defoperator "--" TYPE UNARY_PREFIX PRECEDENCE 60 ASSOC N HANDLER "bsh_op_prefix_decrement"
defoperator "++" TYPE UNARY_POSTFIX PRECEDENCE 60 ASSOC N HANDLER "bsh_op_postfix_increment"
defoperator "--" TYPE UNARY_POSTFIX PRECEDENCE 60 ASSOC N HANDLER "bsh_op_postfix_decrement"

# Comparison Operators (precedence 30)
defoperator "==" TYPE BINARY_INFIX PRECEDENCE 30 ASSOC L HANDLER "bsh_op_equals"
defoperator "!=" TYPE BINARY_INFIX PRECEDENCE 30 ASSOC L HANDLER "bsh_op_not_equals"
defoperator ">"  TYPE BINARY_INFIX PRECEDENCE 30 ASSOC L HANDLER "bsh_op_greater_than"
defoperator "<"  TYPE BINARY_INFIX PRECEDENCE 30 ASSOC L HANDLER "bsh_op_less_than"
defoperator ">=" TYPE BINARY_INFIX PRECEDENCE 30 ASSOC L HANDLER "bsh_op_greater_equals"
defoperator "<=" TYPE BINARY_INFIX PRECEDENCE 30 ASSOC L HANDLER "bsh_op_less_equals"

# Logical NOT (if to be used as a general prefix operator like ! $var)
# defoperator "!" TYPE UNARY_PREFIX PRECEDENCE 60 ASSOC N HANDLER "bsh_op_logical_not"

# Ternary Conditional Operator (precedence 5, right-associative for nesting)
defoperator "?" TYPE TERNARY_PRIMARY PRECEDENCE 5 ASSOC R HANDLER "bsh_op_ternary_handler"
# The ':' is implicitly handled by the C parser when it encounters '?' defined as TERNARY_PRIMARY.
# No separate defoperator for ':' as part of the ternary is needed if C handles the structure.

# Dot operator for decimal construction or potential property access (very high precedence)
# If used for property access like $obj.prop, its handler would manage that.
# If for decimals 10.5, its handler combines "10" and "5".
defoperator "." TYPE BINARY_INFIX PRECEDENCE 70 ASSOC L HANDLER "bsh_op_dot_handler"


echo "Core operator symbols and properties defined."

# --- BSH Operator Handler Functions ---
# These functions are called by the C core's expression evaluator.
# Signature: handler_func (op_symbol_str, operand1_str, [operand2_str, ...] result_holder_var_name)

# --- Arithmetic Handlers ---
function bsh_op_add_or_concat (op_sym lhs rhs result_var) {
    # echo "BSH Handler: $op_sym on '$lhs', '$rhs' -> $result_var"
    get_type "$lhs" lhs_type_var # from type.bsh
    get_type "$rhs" rhs_type_var # from type.bsh

    if "$lhs_type_var" == "STRING" || "$rhs_type_var" == "STRING" {
        # Assume string_concat is available globally or imported.
        string_concat "$lhs" "$rhs" $result_var # from string.bsh
    } else {
        math_add "$lhs" "$rhs" $result_var # from number.bsh
    }
}

function bsh_op_subtract (op_sym lhs rhs result_var) {
    # echo "BSH Handler: $op_sym on '$lhs', '$rhs' -> $result_var"
    math_sub "$lhs" "$rhs" $result_var # from number.bsh
}
function bsh_op_multiply (op_sym lhs rhs result_var) {
    math_mul "$lhs" "$rhs" $result_var # from number.bsh
}
function bsh_op_divide (op_sym lhs rhs result_var) {
    math_div "$lhs" "$rhs" $result_var # from number.bsh
}
function bsh_op_modulo (op_sym lhs rhs result_var) {
    math_mod "$lhs" "$rhs" $result_var # from number.bsh
}
# function bsh_op_negate (op_sym val result_var) {
#   # math_sub "0" "$val" $result_var # Example
# }

# --- Unary Increment/Decrement Handlers ---
# These expect operand_str to be the NAME of the variable.
function bsh_op_prefix_increment (op_sym var_name result_var) {
    # echo "BSH Handler: $op_sym on var_name '$var_name' -> $result_var"
    bsh_unary_prefix_increment "$var_name" $result_var # from number.bsh
}
function bsh_op_prefix_decrement (op_sym var_name result_var) {
    bsh_unary_prefix_decrement "$var_name" $result_var # from number.bsh
}
function bsh_op_postfix_increment (op_sym var_name result_var) {
    bsh_unary_postfix_increment "$var_name" $result_var # from number.bsh
}
function bsh_op_postfix_decrement (op_sym var_name result_var) {
    bsh_unary_postfix_decrement "$var_name" $result_var # from number.bsh
}

# --- Comparison Handlers ---
function bsh_op_equals (op_sym lhs rhs result_var) {
    math_eq "$lhs" "$rhs" $result_var # from number.bsh
}
function bsh_op_not_equals (op_sym lhs rhs result_var) {
    math_ne "$lhs" "$rhs" $result_var # from number.bsh
}
function bsh_op_greater_than (op_sym lhs rhs result_var) {
    math_gt "$lhs" "$rhs" $result_var # from number.bsh
}
function bsh_op_less_than (op_sym lhs rhs result_var) {
    math_lt "$lhs" "$rhs" $result_var # from number.bsh
}
function bsh_op_greater_equals (op_sym lhs rhs result_var) {
    math_ge "$lhs" "$rhs" $result_var # from number.bsh
}
function bsh_op_less_equals (op_sym lhs rhs result_var) {
    math_le "$lhs" "$rhs" $result_var # from number.bsh
}

# --- Logical NOT Handler ---
# function bsh_op_logical_not (op_sym val result_var) {
#   math_not "$val" $result_var # from number.bsh
# }

# --- Ternary Operator Handler ---
# C calls: bsh_op_ternary_handler("?", eval_COND, true_expr_val_str, false_expr_val_str, result_var)
# The C parser provided passes evaluated strings for true/false branches for now.
# For lazy eval, C would need to pass token lists.
function bsh_op_ternary_handler (op_sym cond_val true_val false_val result_var) {
    echo "BSH Ternary Handler: Cond='$cond_val', TrueV='$true_val', FalseV='$false_val' -> $result_var"
    # Truthiness check for cond_val
    if "$cond_val" == "1" || "$cond_val" == "true" || ("$cond_val" != "0" && "$cond_val" != "false" && "$cond_val" != "") {
        $($result_var) = "$true_val"
    } else {
        $($result_var) = "$false_val"
    }
}

# --- Dot Operator Handler ---
# This is a versatile operator.
# 1. Decimal construction: "10" . "5" -> "10.5"
# 2. Property access: $myobj . "propertyname" -> value of myobj_propertyname
# The C parser will pass the LHS and RHS as evaluated strings.
function bsh_op_dot_handler (op_sym lhs rhs result_var) {
    echo "BSH Dot Handler: LHS='$lhs', RHS='$rhs' -> $result_var"

    # Attempt to see if it looks like decimal construction
    get_type "$lhs" lhs_type_var
    get_type "$rhs" rhs_type_var

    # Heuristic: if RHS is purely digits and LHS is empty or digits, treat as decimal.
    # This is simplistic. A more robust way might involve checking if LHS is a known object type.
    $is_lhs_numeric_like = "0"
    if "$lhs_type_var" == "INTEGER" || "$lhs_type_var" == "FLOAT" || "$lhs" == "" {
        $is_lhs_numeric_like = "1"
    }
    $is_rhs_integer = "0"
    if "$rhs_type_var" == "INTEGER" { $is_rhs_integer = "1" }

    if "$is_lhs_numeric_like" == "1" && "$is_rhs_integer" == "1" && !($lhs == "" && $rhs == "") {
        # Decimal construction like 10.5 or .5
        if "$lhs" == "" {
            $($result_var) = "0.$rhs"
        } else {
            $($result_var) = "$lhs.$rhs"
        }
        echo "Dot Handler: Decimal construct -> $($result_var)"
    } else {
        # Assume property access: lhs is base var name (string), rhs is property name (string)
        # This assumes that if $myobj.prop is typed, $myobj is evaluated to its *name* string "myobj"
        # if it's not a literal. The C parser needs to handle this.
        # If $myobj evaluates to its value, this won't work for property access easily.
        # For simplicity, let's assume 'lhs' is the base object's name if it's for property access.
        # This part is tricky without knowing exactly how C evaluates $obj for $obj.prop.
        # If C always fully evaluates $obj, then dot for property access is harder.
        # Let's assume for now this handler is primarily for decimal construction.
        # Property access via dot is usually handled directly in C's expand_variables_in_string_advanced.
        # If dot is a generic operator, its BSH handler would need careful design for property access.
        echo "Dot Handler: Not interpreting as decimal construction. LHS type: $lhs_type_var, RHS type: $rhs_type_var."
        echo "             Property access via '.' operator in BSH needs careful C-side support for LHS evaluation."
        $($result_var) = "$lhs.$rhs" # Fallback: literal concatenation
    }
}

echo "Core Operators Framework: Specific BSH handlers defined."